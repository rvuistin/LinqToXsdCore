//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToXsd.Schemas.Test.EnumsTypes {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public sealed class EmptyType {
        
        private EmptyType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    public enum LanguageCodeEnum {
        
        en,
        
        fr,
    }
    
    public sealed class LanguageCodeEnumValidator {
        
        private LanguageCodeEnumValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "en",
                        "fr"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    public enum InvalidCharEnum {
        
        en_fr,
        
        fr_de_it,
    }
    
    public sealed class InvalidCharEnumValidator {
        
        private InvalidCharEnumValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "en-fr:en_fr",
                        "fr-de-it:fr_de_it"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Language, Invalid, Empty)
    /// </para>
    /// </summary>
    public partial class GlobalEnumElementType : XTypedElement, IXMetaData {
        
		public static explicit operator GlobalEnumElementType(XElement xe) { return XTypedServices.ToXTypedElement<GlobalEnumElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GlobalEnumElementType>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public GlobalEnumElementType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum Language {
            get {
                XElement x = this.GetElement(LanguageXName);
                return ((LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, global::LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnumValidator.TypeDefinition))));
            }
            set {
                this.SetElementWithValidation(LanguageXName, value.ToString(), "Language", global::LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnumValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName InvalidXName = System.Xml.Linq.XName.Get("Invalid", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum Invalid {
            get {
                XElement x = this.GetElement(InvalidXName);
                return ((LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, global::LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnumValidator.TypeDefinition))));
            }
            set {
                this.SetElementWithValidation(InvalidXName, value.ToString(), "Invalid", global::LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnumValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName EmptyXName = System.Xml.Linq.XName.Get("Empty", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual string Empty {
            get {
                XElement x = this.GetElement(EmptyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(EmptyXName, value, "Empty", global::LinqToXsd.Schemas.Test.EnumsTypes.EmptyType.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GlobalEnumElementType", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        static GlobalEnumElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LanguageXName), new NamedContentModelEntity(InvalidXName), new NamedContentModelEntity(EmptyXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LanguageXName, typeof(string));
            localElementDictionary.Add(InvalidXName, typeof(string));
            localElementDictionary.Add(EmptyXName, typeof(string));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class GlobalEnumAttributeType : XTypedElement, IXMetaData {
        
		public static explicit operator GlobalEnumAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<GlobalEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GlobalEnumAttributeType>(this);
        }
        
        public GlobalEnumAttributeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum? language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, global::LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(languageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(languageXName, value.ToString(), "language", global::LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnumValidator.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName invalidXName = System.Xml.Linq.XName.Get("invalid", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum? invalid {
            get {
                XAttribute x = this.Attribute(invalidXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, global::LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(invalidXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(invalidXName, value.ToString(), "invalid", global::LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnumValidator.TypeDefinition);
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GlobalEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Language, Invalid)
    /// </para>
    /// </summary>
    public partial class NestedEnumElementType : XTypedElement, IXMetaData {
        
		public static explicit operator NestedEnumElementType(XElement xe) { return XTypedServices.ToXTypedElement<NestedEnumElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NestedEnumElementType>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Language, Invalid)
        /// </para>
        /// </summary>
        public NestedEnumElementType() {
        }
        
        public enum LanguageEnum {
            
            en,
            
            fr,
        }
        
        public sealed class LanguageEnumValidator {
            
            private LanguageEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "en",
                            "fr"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.LanguageEnum Language {
            get {
                XElement x = this.GetElement(LanguageXName);
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.LanguageEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.LanguageEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, LanguageEnumValidator.TypeDefinition))));
            }
            set {
                this.SetElementWithValidation(LanguageXName, value.ToString(), "Language", LanguageEnumValidator.TypeDefinition);
            }
        }
        
        public enum InvalidEnum {
            
            en_fr,
            
            fr_de_it,
        }
        
        public sealed class InvalidEnumValidator {
            
            private InvalidEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "en-fr:en_fr",
                            "fr-de-it:fr_de_it"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName InvalidXName = System.Xml.Linq.XName.Get("Invalid", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.InvalidEnum Invalid {
            get {
                XElement x = this.GetElement(InvalidXName);
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.InvalidEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.InvalidEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, InvalidEnumValidator.TypeDefinition))));
            }
            set {
                this.SetElementWithValidation(InvalidXName, value.ToString(), "Invalid", InvalidEnumValidator.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NestedEnumElementType", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        static NestedEnumElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LanguageXName), new NamedContentModelEntity(InvalidXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LanguageXName, typeof(string));
            localElementDictionary.Add(InvalidXName, typeof(string));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class NestedEnumAttributeType : XTypedElement, IXMetaData {
        
		public static explicit operator NestedEnumAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<NestedEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NestedEnumAttributeType>(this);
        }
        
        public NestedEnumAttributeType() {
        }
        
        public enum LanguageEnum {
            
            en,
            
            fr,
        }
        
        public sealed class LanguageEnumValidator {
            
            private LanguageEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "en",
                            "fr"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.LanguageEnum? language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.LanguageEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.LanguageEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, LanguageEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(languageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(languageXName, value.ToString(), "language", LanguageEnumValidator.TypeDefinition);
                }
            }
        }
        
        public enum InvalidEnum {
            
            en_fr,
            
            fr_de_it,
        }
        
        public sealed class InvalidEnumValidator {
            
            private InvalidEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "en-fr:en_fr",
                            "fr-de-it:fr_de_it"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName invalidXName = System.Xml.Linq.XName.Get("invalid", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.InvalidEnum? invalid {
            get {
                XAttribute x = this.Attribute(invalidXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.InvalidEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.InvalidEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, InvalidEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(invalidXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(invalidXName, value.ToString(), "invalid", InvalidEnumValidator.TypeDefinition);
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NestedEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class NestedDerivedEnumAttributeType : global::LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType, IXMetaData {
        
		public static explicit operator NestedDerivedEnumAttributeType(XElement xe) { return XTypedServices.ToXTypedElement<NestedDerivedEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NestedDerivedEnumAttributeType>(this);
        }
        
        public NestedDerivedEnumAttributeType() {
        }
        
        public enum AdditionalLanguageEnum {
            
            de,
            
            it,
            
            rm,
        }
        
        public sealed class AdditionalLanguageEnumValidator {
            
            private AdditionalLanguageEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "de",
                            "it",
                            "rm"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName additionalLanguageXName = System.Xml.Linq.XName.Get("additionalLanguage", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalLanguageEnum? additionalLanguage {
            get {
                XAttribute x = this.Attribute(additionalLanguageXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalLanguageEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalLanguageEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, AdditionalLanguageEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(additionalLanguageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(additionalLanguageXName, value.ToString(), "additionalLanguage", AdditionalLanguageEnumValidator.TypeDefinition);
                }
            }
        }
        
        public enum AdditionalInvalidEnum {
            
            de,
            
            it_rm,
        }
        
        public sealed class AdditionalInvalidEnumValidator {
            
            private AdditionalInvalidEnumValidator() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "de",
                            "it-rm:it_rm"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName additionalInvalidXName = System.Xml.Linq.XName.Get("additionalInvalid", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalInvalidEnum? additionalInvalid {
            get {
                XAttribute x = this.Attribute(additionalInvalidXName);
                if ((x == null)) {
                    return null;
                }
                return ((LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalInvalidEnum)(Enum.Parse(typeof(LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalInvalidEnum), XTypedServices.ParseValue(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, AdditionalInvalidEnumValidator.TypeDefinition))));
            }
            set {
                if (value == null) {
                    this.SetAttribute(additionalInvalidXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetAttributeWithValidation(additionalInvalidXName, value.ToString(), "additionalInvalid", AdditionalInvalidEnumValidator.TypeDefinition);
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NestedDerivedEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Element1 : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Element1 Load(string xmlFile) {
            return XTypedServices.Load<Element1, GlobalEnumElementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Element1, GlobalEnumElementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element1 Parse(string xml) {
            return XTypedServices.Parse<Element1, GlobalEnumElementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Element1(XElement xe) { return XTypedServices.ToXTypedElement<Element1, GlobalEnumElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Element1(((GlobalEnumElementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GlobalEnumElementType ContentField;
        
        public Element1() {
            SetInnerType(new GlobalEnumElementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GlobalEnumElementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(GlobalEnumElementType ContentField) {
            this.ContentField = ((GlobalEnumElementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Element1(GlobalEnumElementType content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum Language {
            get {
                return this.ContentField.Language;
            }
            set {
                this.ContentField.Language = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum Invalid {
            get {
                return this.ContentField.Invalid;
            }
            set {
                this.ContentField.Invalid = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid, Empty)
        /// </para>
        /// </summary>
        public virtual string Empty {
            get {
                return this.ContentField.Empty;
            }
            set {
                this.ContentField.Empty = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Element1", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Element2 : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Element2 Load(string xmlFile) {
            return XTypedServices.Load<Element2, GlobalEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element2 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Element2, GlobalEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element2 Parse(string xml) {
            return XTypedServices.Parse<Element2, GlobalEnumAttributeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Element2(XElement xe) { return XTypedServices.ToXTypedElement<Element2, GlobalEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Element2(((GlobalEnumAttributeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GlobalEnumAttributeType ContentField;
        
        public Element2() {
            SetInnerType(new GlobalEnumAttributeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GlobalEnumAttributeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(GlobalEnumAttributeType ContentField) {
            this.ContentField = ((GlobalEnumAttributeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Element2(GlobalEnumAttributeType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.LanguageCodeEnum? language {
            get {
                return this.ContentField.language;
            }
            set {
                this.ContentField.language = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.InvalidCharEnum? invalid {
            get {
                return this.ContentField.invalid;
            }
            set {
                this.ContentField.invalid = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Element2", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Element3 : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Element3 Load(string xmlFile) {
            return XTypedServices.Load<Element3, NestedEnumElementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element3 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Element3, NestedEnumElementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element3 Parse(string xml) {
            return XTypedServices.Parse<Element3, NestedEnumElementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Element3(XElement xe) { return XTypedServices.ToXTypedElement<Element3, NestedEnumElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Element3(((NestedEnumElementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NestedEnumElementType ContentField;
        
        public Element3() {
            SetInnerType(new NestedEnumElementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual NestedEnumElementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(NestedEnumElementType ContentField) {
            this.ContentField = ((NestedEnumElementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Element3(NestedEnumElementType content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.LanguageEnum Language {
            get {
                return this.ContentField.Language;
            }
            set {
                this.ContentField.Language = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Language, Invalid)
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType.InvalidEnum Invalid {
            get {
                return this.ContentField.Invalid;
            }
            set {
                this.ContentField.Invalid = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Element3", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Element4 : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Element4 Load(string xmlFile) {
            return XTypedServices.Load<Element4, NestedEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element4 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Element4, NestedEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element4 Parse(string xml) {
            return XTypedServices.Parse<Element4, NestedEnumAttributeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Element4(XElement xe) { return XTypedServices.ToXTypedElement<Element4, NestedEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Element4(((NestedEnumAttributeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NestedEnumAttributeType ContentField;
        
        public Element4() {
            SetInnerType(new NestedEnumAttributeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual NestedEnumAttributeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(NestedEnumAttributeType ContentField) {
            this.ContentField = ((NestedEnumAttributeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Element4(NestedEnumAttributeType content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.LanguageEnum? language {
            get {
                return this.ContentField.language;
            }
            set {
                this.ContentField.language = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.InvalidEnum? invalid {
            get {
                return this.ContentField.invalid;
            }
            set {
                this.ContentField.invalid = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Element4", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Element5 : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Element5 Load(string xmlFile) {
            return XTypedServices.Load<Element5, NestedDerivedEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element5 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Element5, NestedDerivedEnumAttributeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Element5 Parse(string xml) {
            return XTypedServices.Parse<Element5, NestedDerivedEnumAttributeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Element5(XElement xe) { return XTypedServices.ToXTypedElement<Element5, NestedDerivedEnumAttributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Element5(((NestedDerivedEnumAttributeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NestedDerivedEnumAttributeType ContentField;
        
        public Element5() {
            SetInnerType(new NestedDerivedEnumAttributeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual NestedDerivedEnumAttributeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(NestedDerivedEnumAttributeType ContentField) {
            this.ContentField = ((NestedDerivedEnumAttributeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Element5(NestedDerivedEnumAttributeType content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalLanguageEnum? additionalLanguage {
            get {
                return this.ContentField.additionalLanguage;
            }
            set {
                this.ContentField.additionalLanguage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType.AdditionalInvalidEnum? additionalInvalid {
            get {
                return this.ContentField.additionalInvalid;
            }
            set {
                this.ContentField.additionalInvalid = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.LanguageEnum? language {
            get {
                return this.ContentField.language;
            }
            set {
                this.ContentField.language = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType.InvalidEnum? invalid {
            get {
                return this.ContentField.invalid;
            }
            set {
                this.ContentField.invalid = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Element5", "http://linqtoxsd.schemas.org/test/enums-test.xsd");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private LinqToXsdTypeManager() {
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("GlobalEnumElementType", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.GlobalEnumElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GlobalEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.GlobalEnumAttributeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NestedEnumElementType", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NestedEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NestedDerivedEnumAttributeType", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType));
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Element1", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.Element1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Element2", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.Element2));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Element3", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.Element3));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Element4", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.Element4));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Element5", "http://linqtoxsd.schemas.org/test/enums-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.Element5));
        }
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(LinqToXsd.Schemas.Test.EnumsTypes.Element1), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.GlobalEnumElementType));
            wrapperDictionary.Add(typeof(LinqToXsd.Schemas.Test.EnumsTypes.Element2), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.GlobalEnumAttributeType));
            wrapperDictionary.Add(typeof(LinqToXsd.Schemas.Test.EnumsTypes.Element3), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumElementType));
            wrapperDictionary.Add(typeof(LinqToXsd.Schemas.Test.EnumsTypes.Element4), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedEnumAttributeType));
            wrapperDictionary.Add(typeof(LinqToXsd.Schemas.Test.EnumsTypes.Element5), typeof(global::LinqToXsd.Schemas.Test.EnumsTypes.NestedDerivedEnumAttributeType));
        }
        
        private static XmlSchemaSet schemaSet;
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Element1", "http://linqtoxsd.schemas.org/test/enums-test.xsd")];
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(Element1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Element1 Element1 {  get {return rootObject as Element1; } }
        
        public XRootNamespace(Element2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Element2 Element2 {  get {return rootObject as Element2; } }
        
        public XRootNamespace(Element3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Element3 Element3 {  get {return rootObject as Element3; } }
        
        public XRootNamespace(Element4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Element4 Element4 {  get {return rootObject as Element4; } }
        
        public XRootNamespace(Element5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Element5 Element5 {  get {return rootObject as Element5; } }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRoot() {
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRoot(global::LinqToXsd.Schemas.Test.EnumsTypes.Element1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.EnumsTypes.Element1 Element1 {  get {return rootObject as global::LinqToXsd.Schemas.Test.EnumsTypes.Element1; } }
        
        public XRoot(global::LinqToXsd.Schemas.Test.EnumsTypes.Element2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.EnumsTypes.Element2 Element2 {  get {return rootObject as global::LinqToXsd.Schemas.Test.EnumsTypes.Element2; } }
        
        public XRoot(global::LinqToXsd.Schemas.Test.EnumsTypes.Element3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.EnumsTypes.Element3 Element3 {  get {return rootObject as global::LinqToXsd.Schemas.Test.EnumsTypes.Element3; } }
        
        public XRoot(global::LinqToXsd.Schemas.Test.EnumsTypes.Element4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.EnumsTypes.Element4 Element4 {  get {return rootObject as global::LinqToXsd.Schemas.Test.EnumsTypes.Element4; } }
        
        public XRoot(global::LinqToXsd.Schemas.Test.EnumsTypes.Element5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.EnumsTypes.Element5 Element5 {  get {return rootObject as global::LinqToXsd.Schemas.Test.EnumsTypes.Element5; } }
    }
}
